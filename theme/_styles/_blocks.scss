@use "sass:map";
@use "sass:color";
@use "variables" as v;
@use "breakpoints";

.bgn-block,
blockquote {
    --border-thickness: .65ex;
    --border-offset: 0ex;
    --border-color: var(--blue);
    --background-color: var(--border-color);
}



@include breakpoints.at_least_md {

    .bgn-block,
    blockquote {
        --border-offset: 2ex;
    }
}

.bgn-block,
blockquote {
    & {
        border-left: var(--border-thickness) solid var(--border-color) !important;
        padding: 0 0 0 calc(var(--border-offset) - var(--border-thickness));
        margin: 1ex 0 1ex calc(-1.0 * var(--border-offset));

        & h4 {
            color: var(--border-color);
            font-size: 1.2rem;
            padding: 0;
            margin: 0;
            font-family: v.$serif;
        }

        & div {
            margin: 0;
            padding: 0;

            & p:first-child {
                margin-top: 0;
                padding-top: 0;
            }

            & p:last-child {
                margin-bottom: 0;
                padding-bottom: 0;
            }
        }
    }

    &:before {
        content: '';

        pointer-events: none;

        font-family: var(--serif);
        text-transform: capitalize;
        font-weight: bold;

        color: var(--border-color);
    }
}

.bgn-block {
    & {
        position: relative;
        padding: 1ex 1ex 1ex 2ex;
    }

    & * {
        position: relative;
        z-index: 1;
    }

    &>div {
        overflow-x: scroll;
        overflow-y: hidden;
    }


    &>h4 {
        & {
            margin-bottom: 1ex;
        }

        &>p {
            margin: 0;
            padding: 0;
            display: inline;
        }
    }

    &:before {
        left: calc(var(--border-offset) - var(--border-thickness));
    }

    &:after {
        content: '';
        position: absolute;

        pointer-events: none;

        left: 0;
        top: 0;

        width: 100%;
        height: 100%;

        background: var(--background-color);
        opacity: 0.05;

        z-index: 0;
    }

    &.remark {
        & {
            counter-increment: remark 1;
            --border-color: var(--border-color);
        }

        &:before {
            content: "Remark " counter(remark);
        }

        &.short:before {
            content: "* " counter(remark);
        }
    }

    &.example {
        & {
            counter-increment: example 1;
            --border-color: var(--red);
            --background-color: #{color.scale(map.get(v.$colors, "red"), $saturation: -50%)}
        }

        &:before {
            content: "Example " counter(example);
        }

        &.short:before {
            content: "Ex " counter(example);
        }
    }

    &.definition {
        & {
            counter-increment: definition 1;
            --border-color: var(--green);
        }

        &:before {
            content: "Definition " counter(definition);
        }

        &.short:before {
            content: "Def. " counter(definition);
        }
    }

    &.algorithm {
        & {
            counter-increment: algorithm 1;
            --border-color: var(--indigo);

            font-family: var(--font-monospace)
        }

        & strong {
            color: var(--red)
        }

        & ul {
            list-style-type: none;
        }

        & ul li em {
            white-space: preserve;
        }

        & code {
            font-size: 1rem;
        }

        &>div>ul,
        & ul li p {
            margin: 0;
            padding: 0;

            text-wrap: nowrap;
        }

        &:before {
            content: "Algorithm " counter(algorithm);
        }

        &.short:before {
            content: "Alg. " counter(algorithm);
        }
    }

    &.lemma {
        & {
            --border-color: var(--cyan);
        }

        &:before {
            content: "Lemma ";
        }
    }

    &.theorem {
        & {
            --border-color: var(--pink);
        }

        &:before {
            content: "Theorem ";
        }

        &.short:before {
            content: "Thm. ";
        }
    }

    &.proof {
        & {
            --border-color: var(--yellow);
        }

        &:before {
            content: "Proof ";
        }

        &.short:before {
            content: "Pf. ";
        }
    }

    &.lemma,
    &.theorem,
    &.proof {
        &>h4:before {
            display: inline;
            font-weight: bold;
        }
    }

    @each $name, $color in v.$colors {
        &.#{$name} {
            --border-color: var(--#{$name});
        }
    }
}

.bgn-block.lemma,
.bgn-block.theorem {
    &+.bgn-block.proof:not(.space) {
        margin-top: -1ex;
    }
}


blockquote {
    & {
        position: relative;
        font-style: italic;
    }

    &:before {
        position: absolute;
        content: ">";

        top: 0;
        left: calc(-1.0 * var(--border-offset));
        font-style: normal;
    }
}